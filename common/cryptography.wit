interface cryptography {
  use types.{blob, bytes};
  use leases.{lease-id};

  resource digest {
    from-raw-bytes: static func(b: bytes) -> result<digest>;
    from-hex-string: static func(s: string) -> result<digest>;
    from-base64-string: static func(s: string) -> result<digest>;

    compute: static func(data: borrow<blob>) -> digest;
    compute-bytes: static func(data: bytes) -> digest;

    clone: func() -> digest;
    is-equal-to: func(other: borrow<digest>) -> bool;
    as-raw-bytes: func() -> bytes;
    as-hex-string: func() -> string;
    as-base64-string: func() -> string;
  }

  resource signature {
    from-raw-bytes: static func(b: bytes) -> result<signature>;
    from-hex-string: static func(s: string) -> result<signature>;
    from-base64-string: static func(s: string) -> result<signature>;

    clone: func() -> signature;
    is-equal-to: func(other: borrow<signature>) -> bool;
    as-raw-bytes: func() -> bytes;
    as-hex-string: func() -> string;
    as-base64-string: func() -> string;
  }

  resource cipher-nonce {
    from-raw-bytes: static func(b: bytes) -> result<cipher-nonce>;
    from-hex-string: static func(s: string) -> result<cipher-nonce>;
    from-base64-string: static func(s: string) -> result<cipher-nonce>;

    from-parts: func(channel-id: u32, counter: u64) -> cipher-nonce;
    from-random: static func() -> cipher-nonce;

    clone: func() -> cipher-nonce;
    is-equal-to: func(other: borrow<cipher-nonce>) -> bool;
    as-raw-bytes: func() -> bytes;
    as-hex-string: func() -> string;
    as-base64-string: func() -> string;

    as-parts: func() -> tuple<u32, u64>;
  }

  resource cipher-tag {
    from-raw-bytes: static func(b: bytes) -> result<cipher-tag>;
    from-hex-string: static func(s: string) -> result<cipher-tag>;
    from-base64-string: static func(s: string) -> result<cipher-tag>;

    clone: func() -> cipher-tag;
    is-equal-to: func(other: borrow<cipher-tag>) -> bool;
    as-raw-bytes: func() -> bytes;
    as-hex-string: func() -> string;
    as-base64-string: func() -> string;
  }

  resource sealing-share {
    from-raw-bytes: static func(b: bytes) -> result<sealing-share>;
    from-hex-string: static func(s: string) -> result<sealing-share>;
    from-base64-string: static func(s: string) -> result<sealing-share>;

    clone: func() -> sealing-share;
    is-equal-to: func(other: borrow<sealing-share>) -> bool;
    as-raw-bytes: func() -> bytes;
    as-hex-string: func() -> string;
    as-base64-string: func() -> string;
  }

  resource signing-identity {
    from-raw-bytes: static func(b: bytes) -> result<signing-identity>;
    from-hex-string: static func(s: string) -> result<signing-identity>;
    from-base64-string: static func(s: string) -> result<signing-identity>;

    clone: func() -> signing-identity;
    is-equal-to: func(other: borrow<signing-identity>) -> bool;
    as-raw-bytes: func() -> bytes;
    as-hex-string: func() -> string;
    as-base64-string: func() -> string;

    verify: func(data: blob, sig: borrow<signature>) -> result<blob>;
  }

  resource generic-secret {
    from-random: static func() -> generic-secret;
    from-raw-bytes: static func(b: bytes) -> result<generic-secret>;

    clone: func() -> generic-secret;

    derive-generic-secret: func(seed: string) -> generic-secret;
    derive-cipher-secret: func(seed: string) -> cipher-secret;
    derive-sealing-secret: func(seed: string) -> sealing-secret;
    derive-signing-secret: func(seed: string) -> signing-secret;
  }

  resource cipher-secret {
    from-random: static func() -> cipher-secret;
    from-raw-bytes: static func(b: bytes) -> result<cipher-secret>;

    clone: func() -> cipher-secret;

    encrypt: func(plain-data: blob, associated-data: option<blob>, nonce: borrow<cipher-nonce>) -> result<tuple<blob, option<blob>, cipher-tag>>;
    decrypt: func(cipher-data: blob, associated-data: option<blob>, nonce: cipher-nonce, tag: cipher-tag) -> result<tuple<blob, option<blob>>>;
  }

  resource sealing-secret {
    from-random: static func() -> sealing-secret;
    from-raw-bytes: static func(b: bytes) -> result<sealing-secret>;

    clone: func() -> sealing-secret;
    as-share: func() -> sealing-share;

    derive-common-secret: func(partner: borrow<sealing-share>) -> result<generic-secret>;
  }

  resource signing-secret {
    from-random: static func() -> signing-secret;
    from-raw-bytes: static func(b: bytes) -> result<signing-secret>;

    clone: func() -> signing-secret;
    as-identity: func() -> signing-identity;
    as-sealing-secret: func() -> sealing-secret;

    sign: func(data: blob) -> result<tuple<blob, signature>>;
  }

  type secret-id = u32;

  resource key-ring {
    create-generic-secret: func(secret: borrow<generic-secret>, lease: lease-id) -> result<secret-id>;
    recall-generic-secret: func(id: secret-id) -> result<generic-secret>;
    forget-generic-secret: func(id: secret-id) -> result;

    create-cipher-secret: func(secret: borrow<cipher-secret>, lease: lease-id) -> result<secret-id>;
    recall-cipher-secret: func(id: secret-id) -> result<cipher-secret>;
    forget-cipher-secret: func(id: secret-id) -> result;

    create-sealing-secret: func(secret: borrow<sealing-secret>, lease: lease-id) -> result<secret-id>;
    recall-sealing-secret: func(id: secret-id) -> result<sealing-secret>;
    forget-sealing-secret: func(id: secret-id) -> result;

    create-signing-secret: func(secret: borrow<signing-secret>, lease: lease-id) -> result<secret-id>;
    recall-signing-secret: func(id: secret-id) -> result<signing-secret>;
    forget-signing-secret: func(id: secret-id) -> result;
  }
}
