interface values {
  use clocks.{duration, instant};

  type bytes = list<u8>;

  variant scalar-value {
    bool-value(bool),
    s8-value(s8),
    s16-value(s16),
    s32-value(s32),
    s64-value(s64),
    u8-value(u8),
    u16-value(u16),
    u32-value(u32),
    u64-value(u64),
    f32-value(f32),
    f64-value(f64),
    string-value(string),
    bytes-value(bytes),
    duration-value(duration),
    instant-value(instant),
  }

  variant list-value {
    bool-list(list<bool>),
    s8-list(list<s8>),
    s16-list(list<s16>),
    s32-list(list<s32>),
    s64-list(list<s64>),
    u8-list(list<u8>),
    u16-list(list<u16>),
    u32-list(list<u32>),
    u64-list(list<u64>),
    f32-list(list<f32>),
    f64-list(list<f64>),
    string-list(list<string>),
    bytes-list(list<bytes>),
    duration-list(list<duration>),
    instant-list(list<instant>),
  }

  variant value {
    scalar-value(scalar-value),
    list-value(list-value),
  }

  resource value-map {
    entries: func() -> list<tuple<string, value>>;
    keys: func() -> list<string>;
    get: func(key: string) -> result<value>;
  }

  resource mutable-value-map {
    constructor(copy-from: option<borrow<value-map>>);
    create: func(key: string, value: value) -> result;
    replace: func(key: string, value: value) -> result;
    create-or-replace: func(key: string, value: value) -> result;
    delete: func(key: string) -> result;
    freeze: func() -> value-map;
  }
}
