interface pages {
  use cryptography.{signing-identity, cipher-secret, cipher-nonce};
  use leases.{lease-id};

  type ed25519-public-key = list<u8>; // array<u8, 32>
  type page-hash = list<u8>;          // array<u8, 32>
  type page-data = list<u8>;          // array<u8, 65536>

  enum priority {
    lowest,
    low,
    normal,
    high,
  }

  record storage-options {
    durability: option<priority>,
  }

  record transfer-options {
    privacy: option<priority>,
    reliability: option<priority>,
    timeliness: option<priority>,
  }

  resource page {
    create: static func(data: page-data, id: lease-id, opts: storage-options) -> result<page>;
    retrieve: static func(hash: page-hash, id: lease-id, s-opts: storage-options, t-opts: transfer-options) -> result<page>;

    is-ready: func() -> bool;
    hash: func() -> page-hash;
    data: func() -> result<page-data>;

    attach-lease: func(lease: lease-id, opts: storage-options) -> result;
    detach-lease: func(lease: lease-id) -> result;
    detach-all-leases: func() -> result;
  }
}
