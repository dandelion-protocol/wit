interface pages {
  use types.{blob};
  use leases.{lease-id};
  use cryptography.{digest};

  enum priority {
    lowest,
    low,
    normal,
    high,
  }

  record storage-options {
    durability: option<priority>,
  }

  record transfer-options {
    privacy: option<priority>,
    reliability: option<priority>,
    timeliness: option<priority>,
  }

  resource page {
    create: static func(data: blob, lease: lease-id, s-opts: storage-options) -> result<page>;
    retrieve: static func(key: borrow<digest>, lease: lease-id, s-opts: storage-options, t-opts: transfer-options) -> result<page>;

    clone: func() -> page;
    key: func() -> digest;
    lease: func() -> lease-id;
    has-data: func() -> bool;
    data: func() -> result<blob>;
  }
}
